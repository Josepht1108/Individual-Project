// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Fetch data returns without error 1`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
  style={
    Object {
      "backgroundColor": "#333333",
      "flex": 1,
    }
  }
>
  <View
    style={
      Object {
        "alignItems": "center",
      }
    }
  >
    <View
      style={
        Object {
          "flexDirection": "row",
          "justifyContent": "space-between",
          "paddingTop": 15,
          "width": 637.5,
        }
      }
    >
      <TextInput
        allowFontScaling={true}
        placeholder="Search Topics Here"
        rejectResponderTermination={true}
        style={
          Object {
            "backgroundColor": "white",
            "height": 30,
            "width": 300,
          }
        }
        underlineColorAndroid="transparent"
      />
      <RNGestureHandlerButton
        collapsable={false}
        onGestureEvent={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onHandlerStateChange={[Function]}
        rippleColor={0}
      >
        <View
          accessible={true}
          style={
            Object {
              "marginTop": -2,
              "opacity": 1,
            }
          }
        >
          <Text
            allowFontScaling={false}
            style={
              Array [
                Object {
                  "color": "white",
                  "fontSize": 32,
                },
                undefined,
                Object {
                  "fontFamily": "Ionicons",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                Object {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
    </View>
    <View
      style={
        Object {
          "marginTop": 30,
          "width": 637.5,
        }
      }
    >
      <RCTScrollView
        data={Array []}
        disableVirtualization={false}
        extraData={null}
        getItem={[Function]}
        getItemCount={[Function]}
        horizontal={false}
        initialNumToRender={10}
        keyExtractor={[Function]}
        maxToRenderPerBatch={10}
        onContentSizeChange={[Function]}
        onEndReachedThreshold={2}
        onLayout={[Function]}
        onMomentumScrollEnd={[Function]}
        onRefresh={[Function]}
        onScroll={[Function]}
        onScrollBeginDrag={[Function]}
        onScrollEndDrag={[Function]}
        refreshControl={
          <RefreshControlMock
            onRefresh={[Function]}
            refreshing={false}
          />
        }
        refreshing={false}
        removeClippedSubviews={false}
        renderItem={[Function]}
        scrollEventThrottle={50}
        stickyHeaderIndices={Array []}
        style={
          Object {
            "height": 1067.2,
          }
        }
        updateCellsBatchingPeriod={50}
        viewabilityConfigCallbackPairs={Array []}
        windowSize={21}
      >
        <RCTRefreshControl />
        <View />
      </RCTScrollView>
    </View>
  </View>
</RCTSafeAreaView>
`;

exports[`renders correctly 1`] = `
<RCTSafeAreaView
  emulateUnlessSupported={true}
  style={
    Object {
      "backgroundColor": "#333333",
      "flex": 1,
    }
  }
>
  <View
    style={
      Object {
        "alignItems": "center",
      }
    }
  >
    <View
      style={
        Object {
          "flexDirection": "row",
          "justifyContent": "space-between",
          "paddingTop": 15,
          "width": 637.5,
        }
      }
    >
      <TextInput
        allowFontScaling={true}
        placeholder="Search Topics Here"
        rejectResponderTermination={true}
        style={
          Object {
            "backgroundColor": "white",
            "height": 30,
            "width": 300,
          }
        }
        underlineColorAndroid="transparent"
      />
      <RNGestureHandlerButton
        collapsable={false}
        onGestureEvent={[Function]}
        onGestureHandlerEvent={[Function]}
        onGestureHandlerStateChange={[Function]}
        onHandlerStateChange={[Function]}
        rippleColor={0}
      >
        <View
          accessible={true}
          style={
            Object {
              "marginTop": -2,
              "opacity": 1,
            }
          }
        >
          <Text
            allowFontScaling={false}
            style={
              Array [
                Object {
                  "color": "white",
                  "fontSize": 32,
                },
                undefined,
                Object {
                  "fontFamily": "Ionicons",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                Object {},
              ]
            }
          >
            
          </Text>
        </View>
      </RNGestureHandlerButton>
    </View>
    <View
      style={
        Object {
          "marginTop": 30,
          "width": 637.5,
        }
      }
    >
      <RCTScrollView
        data={Array []}
        disableVirtualization={false}
        extraData={null}
        getItem={[Function]}
        getItemCount={[Function]}
        horizontal={false}
        initialNumToRender={10}
        keyExtractor={[Function]}
        maxToRenderPerBatch={10}
        onContentSizeChange={[Function]}
        onEndReachedThreshold={2}
        onLayout={[Function]}
        onMomentumScrollEnd={[Function]}
        onRefresh={[Function]}
        onScroll={[Function]}
        onScrollBeginDrag={[Function]}
        onScrollEndDrag={[Function]}
        refreshControl={
          <RefreshControlMock
            onRefresh={[Function]}
            refreshing={false}
          />
        }
        refreshing={false}
        removeClippedSubviews={false}
        renderItem={[Function]}
        scrollEventThrottle={50}
        stickyHeaderIndices={Array []}
        style={
          Object {
            "height": 1067.2,
          }
        }
        updateCellsBatchingPeriod={50}
        viewabilityConfigCallbackPairs={Array []}
        windowSize={21}
      >
        <RCTRefreshControl />
        <View />
      </RCTScrollView>
    </View>
  </View>
</RCTSafeAreaView>
`;
